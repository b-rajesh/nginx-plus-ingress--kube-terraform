    default_type            application/json; # If no content-type then assume JSON
    # Return Not found for any api call without a context
    location = / {
        return 404;
    }
    limit_req zone=ip_address;
    limit_req_status 429;
    auth_jwt "authz";
    auth_jwt_key_request /_jwks_uri; # Keys will be fetched by subrequest
    if ( $idp_issuer = 0) { 
            return 403; # Forbidden
    }
    if ( $isAudienceAllowed = 0) { 
            return 403; # Forbidden
    }
    location = /_jwks_uri {
            internal;
            resolver 8.8.8.8 valid=300s status_zone=idp-server; # For DNS lookup of IdP endpoints; status_zone to collect response statuses, error and other metrics about resolver activity
            proxy_method GET;
            proxy_cache  jwk; # Cache public key responses
            proxy_cache_valid 200 12h;                    # How long to consider keys "fresh"
            proxy_cache_use_stale error timeout updating; # Use old JWK Set if cannot reach IdP
            proxy_ssl_server_name on;                     # For SNI to the IdP
            proxy_set_header Content-Length "";           # ''
            proxy_ignore_headers Cache-Control Expires Set-Cookie; # Does not influence caching
            proxy_pass   https://brajesh.au.auth0.com/.well-known/jwks.json; # OIDC JWKS uri to obtain public keys
    }
    error_page 400 = @400;
    location @400 { return 400 '{"status":400,"message":"Bad request"}\n'; }

    error_page 401 = @401;
    location @401 { return 401 '{"status":401,"message":"Unauthorized"}\n'; }

    error_page 403 = @403;
    location @403 { return 403 '{"status":403,"message":"Forbidden - You called invalid HTTP method or you dont have appropriate access rights"}\n'; }

    error_page 404 = @404;
    location @404 { return 404 '{"status":404,"message":"Resource you requested not found"}\n'; }

    error_page 405 = @405;
    location @405 { return 405 '{"status":405,"message":"Method you requested is not allowed"}\n'; }

    error_page 413 = @413;
    location @413 { return 413 '{"status":413,"message":"Payload too large to process"}\n'; }

    error_page 414 = @414;
    location @414 { return 414 '{"status":414,"message":"Request URI too large"}\n'; }

    error_page 415 = @415;
    location @415 { return 415 '{"status":415,"message":"Unsupported media type"}\n'; }

    error_page 426 = @426;
    location @426 { return 426 '{"status":426,"message":"HTTP request was sent to HTTPS port"}\n'; }

    error_page 429 = @429;
    location @429 { return 429 '{"status":429,"message":"API rate limit exceeded"}\n'; }

    add_header Pragma public always;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate" always;
    add_header X-Who-did-this Rajesh always;
    add_header server "" always;

    add_header x-rate-limit $limit_req_status;
    add_header x-rate-limit-remaining $limit_conn_status;
    add_header x-upstream_connect_time $upstream_connect_time always;
    add_header x-original-request-ip $realip_remote_addr  always;
    add_header x-remote_addr $remote_addr;
    add_header x-original-request-uri $request_uri  always;
    add_header x-total-latency $request_time;
    add_header x-upstream_latency $upstream_response_time;
    add_header x-forwarded-for $proxy_add_x_forwarded_for;
    add_header x-forwarded-proto $scheme;
    add_header x-upstream-addr $upstream_addr always;
    add_header x-limit_req_status $limit_req_status;
    add_header x-upstream-status $upstream_status;
    add_header x-correlation-id $request_id  always;

    # To hide nginx version number in error pages and Server header
    #server_tokens off;
    # ref: https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
    add_header X-Frame-Options SAMEORIGIN always;
    # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
    add_header X-Content-Type-Options nosniff always;
    # ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    add_header X-Xss-Protection "1; mode=block" always;